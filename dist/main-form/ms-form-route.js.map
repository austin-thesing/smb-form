{
  "version": 3,
  "sources": ["../../src/main-form/ecommerce-redirect.js", "../../src/main-form/ms-form-route.js"],
  "sourcesContent": ["// DEBUG FLAG: Set to true to enable debug logging\nconst DEBUG = true;\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const form = document.getElementById(\"wf-form-main-hero-form\");\n  const ecommerceSellerSelect = document.getElementById(\"Are-you-an-ecommerce-seller\");\n  const fundingAmountInput = document.getElementById(\"Funding-Amount\");\n  const avgMonthlySalesInput = document.getElementById(\"Revenue-per-month\");\n  const fundingReasonSelect = document.getElementById(\"Use-of-funds\");\n\n  // Improved error handling for missing elements\n  const missing = [];\n  if (!form) missing.push(\"wf-form-main-hero-form\");\n  if (!ecommerceSellerSelect) missing.push(\"Are-you-an-ecommerce-seller\");\n  if (!fundingAmountInput) missing.push(\"Funding-Amount\");\n  if (!avgMonthlySalesInput) missing.push(\"Revenue-per-month\");\n  if (!fundingReasonSelect) missing.push(\"Use-of-funds\");\n  if (missing.length) {\n    if (DEBUG) console.error(\"Missing required form elements:\", missing.join(\", \"));\n    return;\n  }\n\n  /**\n   * Cleans and validates a dollar input value.\n   * @param {HTMLInputElement} inputElement The input element.\n   * @returns {number|null} The cleaned integer value or null if invalid.\n   */\n  function cleanDollarValue(inputElement) {\n    const value = inputElement.value.replace(/[\\$,]/g, \"\");\n    if (DEBUG) console.log(`[DEBUG] Cleaning dollar value for ${inputElement.id}: raw=${inputElement.value}, cleaned=${value}`);\n    const number = parseInt(value, 10);\n    if (DEBUG) console.log(`[DEBUG] Parsed number for ${inputElement.id}:`, number);\n    return !isNaN(number) && number > 0 ? number : null;\n  }\n\n  /**\n   * Maps the selected funding reason to the required lowercase parameter value.\n   * @param {HTMLSelectElement} selectElement The select element.\n   * @returns {string|null} The mapped value or null if no valid option is selected.\n   */\n  function getMappedFundingReason(selectElement) {\n    const selectedValue = selectElement.value;\n    if (DEBUG) console.log(`[DEBUG] Selected funding reason: ${selectedValue}`);\n    const mapping = {\n      \"Inventory\": \"inventory\",\n      \"Marketing\": \"marketing\",\n      \"Other Business Expense\": \"other\", // Assuming this maps to 'other'\n    };\n    const mapped = mapping[selectedValue] || null;\n    if (DEBUG) console.log(`[DEBUG] Mapped funding reason: ${mapped}`);\n    return mapped;\n  }\n\n  ecommerceSellerSelect.addEventListener(\"change\", (event) => {\n    if (DEBUG) console.log(`[DEBUG] Ecommerce seller changed: ${event.target.value}`);\n    if (event.target.value === \"Yes\") {\n      const fundingAmount = cleanDollarValue(fundingAmountInput);\n      const avgMonthlySales = cleanDollarValue(avgMonthlySalesInput);\n      const fundingReason = getMappedFundingReason(fundingReasonSelect);\n      if (DEBUG) {\n        console.log(`[DEBUG] Funding Amount:`, fundingAmount);\n        console.log(`[DEBUG] Avg Monthly Sales:`, avgMonthlySales);\n        console.log(`[DEBUG] Funding Reason:`, fundingReason);\n      }\n      const params = new URLSearchParams();\n      params.append(\"marketing_survey_upsert_survey_form[online_merchant]\", \"true\");\n      if (fundingAmount !== null) {\n        params.append(\"marketing_survey_upsert_survey_form[funding_amount]\", fundingAmount);\n      }\n      if (avgMonthlySales !== null) {\n        params.append(\"marketing_survey_upsert_survey_form[average_monthly_sales]\", avgMonthlySales);\n      }\n      if (fundingReason !== null) {\n        params.append(\"marketing_survey_upsert_survey_form[funding_reason]\", fundingReason);\n      }\n      const redirectUrl = `https://app.onrampfunds.com/signup?${params.toString()}`;\n      if (DEBUG) console.log(\"[DEBUG] Redirecting to:\", redirectUrl);\n      window.location.href = redirectUrl;\n    }\n    // If 'No', do nothing here, let the existing form logic handle it.\n  });\n});\n", "import \"./ecommerce-redirect.js\";\n\n// HubSpot tracking initialization\n(function (d, s, i, r) {\n  if (d.getElementById(i)) {\n    return;\n  }\n  var n = d.createElement(s),\n    e = d.getElementsByTagName(s)[0];\n  n.id = i;\n  n.src = \"//js.hs-analytics.net/analytics/\" + Math.ceil(new Date() / r) * r + \"/19654160.js\";\n\n  // Add onload handler to ensure tracking happens after script loads\n  n.onload = function () {\n    if (window._hsq) {\n      window._hsq.push([\"setPath\", window.location.pathname]);\n      window._hsq.push([\"trackPageView\"]);\n    }\n  };\n\n  e.parentNode.insertBefore(n, e);\n})(document, \"script\", \"hs-analytics\", 300000);\n\n// Function to get URL parameters\nfunction getUrlParams() {\n  const params = {};\n  const searchParams = new URLSearchParams(window.location.search);\n  for (const [key, value] of searchParams) {\n    params[key] = value;\n  }\n  return params;\n}\n\n// Function to populate UTM fields in the form\nfunction populateUtmFields() {\n  const params = getUrlParams();\n  const utmFields = [\"utm_source\", \"utm_medium\", \"utm_campaign\", \"utm_term\", \"utm_content\"];\n\n  utmFields.forEach((field) => {\n    if (params[field]) {\n      // Try to find existing input field\n      let input = document.querySelector(`input[name=\"${field}\"]`);\n\n      // If input doesn't exist, create it\n      if (!input) {\n        input = document.createElement(\"input\");\n        input.type = \"hidden\";\n        input.name = field;\n        const form = document.getElementById(\"wf-form-main-hero-form\");\n        if (form) {\n          form.appendChild(input);\n        }\n      }\n\n      // Set the value\n      input.value = params[field];\n    }\n  });\n}\n\n// Additional page view tracking on window load\nwindow.addEventListener(\"load\", function () {\n  if (window._hsq) {\n    window._hsq.push([\"setPath\", window.location.pathname]);\n    window._hsq.push([\"trackPageView\"]);\n  }\n\n  // Populate UTM fields immediately\n  populateUtmFields();\n});\n\n// Load HubSpot Forms Script\nfunction loadHubSpotScript() {\n  const script = document.createElement(\"script\");\n  script.src = \"https://js.hsforms.net/forms/embed/19654160.js\";\n  script.defer = true;\n  document.head.appendChild(script);\n}\n\n// Function to format input as dollar amount\nfunction formatDollarAmount(input) {\n  // Remove any non-digit characters\n  let value = input.value.replace(/\\D/g, \"\");\n\n  // If empty or only non-numeric characters, clear the input\n  if (value === \"\") {\n    input.value = \"\";\n    return;\n  }\n\n  // Convert to number and ensure it's valid\n  let numValue = parseInt(value);\n  if (isNaN(numValue)) {\n    input.value = \"\";\n    return;\n  }\n\n  // Format the number with commas and no cents\n  value = numValue.toLocaleString(\"en-US\", {\n    style: \"currency\",\n    currency: \"USD\",\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0,\n  });\n\n  // Remove the currency symbol (we'll add it manually to preserve cursor position)\n  value = value.replace(/^\\$/, \"\");\n\n  // Update the input value\n  input.value = \"$\" + value;\n}\n\n// Function to format date as MM/YY with validation\nfunction formatDate(input) {\n  // Remove any non-digit characters\n  let value = input.value.replace(/\\D/g, \"\");\n\n  // Handle month validation\n  if (value.length >= 2) {\n    let month = parseInt(value.slice(0, 2));\n    if (month === 0) month = 1;\n    if (month > 12) month = 12;\n    value = month.toString().padStart(2, \"0\") + value.slice(2);\n  }\n\n  // Add slash after first two digits\n  if (value.length > 2) {\n    value = value.slice(0, 2) + \"/\" + value.slice(2);\n  }\n\n  // Limit to MM/YY format (5 characters)\n  if (value.length > 5) {\n    value = value.slice(0, 5);\n  }\n\n  input.value = value;\n}\n\n// Find all inputs with data-type=\"dollar\"\nconst dollarInputs = document.querySelectorAll('input[data-type=\"dollar\"]');\ndollarInputs.forEach((input) => {\n  input.addEventListener(\"input\", function () {\n    if (this.value.trim() !== \"\") {\n      formatDollarAmount(this);\n    }\n  });\n});\n\n// Handle Funding-Amount input\nconst fundingInput = document.getElementById(\"Funding-Amount\");\nif (fundingInput) {\n  fundingInput.addEventListener(\"input\", function () {\n    if (this.value.trim() !== \"\") {\n      formatDollarAmount(this);\n    }\n  });\n}\n\n// Handle Revenue-per-month input\nconst revenueInput = document.getElementById(\"Revenue-per-month\");\nif (revenueInput) {\n  revenueInput.addEventListener(\"input\", function () {\n    if (this.value.trim() !== \"\") {\n      formatDollarAmount(this);\n    }\n  });\n}\n\n// Add date formatting to business start date input\nconst startDateInput = document.getElementById(\"When-did-you-start-your-business\");\nif (startDateInput) {\n  startDateInput.addEventListener(\"input\", function () {\n    formatDate(this);\n  });\n}\n\n// HubSpot form submission handler\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  // Load HubSpot Forms script\n  loadHubSpotScript();\n\n  const form = document.getElementById(\"wf-form-main-hero-form\");\n\n  if (!form) {\n    console.error(\"Form element not found! Check if the form ID is correct.\");\n    return;\n  }\n\n  // Track initial form view when form becomes visible\n  const observer = new IntersectionObserver((entries) => {\n    entries.forEach((entry) => {\n      if (entry.isIntersecting && window._hsq && !window._formViewTracked) {\n        window._hsq.push([\"trackEvent\", { id: \"form_view\" }]);\n        window._formViewTracked = true;\n\n        // Track form as HubSpot form view\n        window._hsq.push([\n          \"trackForms\",\n          {\n            formId: \"44b5a828-468f-4814-a71e-04ab7d1fd89a\",\n            formInstanceId: form.getAttribute(\"data-form-instance-id\") || \"1\",\n          },\n        ]);\n      }\n    });\n  });\n\n  observer.observe(form);\n\n  // HubSpot form configuration\n  const portalId = \"19654160\";\n  const formId = \"44b5a828-468f-4814-a71e-04ab7d1fd89a\";\n\n  // Get HubSpot tracking cookie\n  function getHubSpotCookie() {\n    return (\n      document.cookie\n        .split(\"; \")\n        .find((row) => row.startsWith(\"hubspotutk=\"))\n        ?.split(\"=\")[1] || \"\"\n    );\n  }\n\n  // Get page info for HubSpot context\n  function getPageInfo() {\n    return {\n      pageUri: window.location.href,\n      pageName: document.title,\n    };\n  }\n\n  // Function to get and parse cookie value\n  function getCookie(name) {\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n      let cookieValue = parts.pop().split(\";\").shift();\n      try {\n        // Try to parse as JSON\n        return JSON.parse(decodeURIComponent(cookieValue));\n      } catch (e) {\n        // If not JSON, return as is\n        return cookieValue;\n      }\n    }\n    return null;\n  }\n\n  // Submit to HubSpot\n  async function submitToHubSpot(formData) {\n    const url = `https://api.hsforms.com/submissions/v3/integration/submit/${portalId}/${formId}`;\n    const data = formatFormData(formData);\n\n    // console.log(\"HubSpot Submission Details:\");\n    // console.log(\"URL:\", url);\n    // console.log(\"Portal ID:\", portalId);\n    // console.log(\"Form ID:\", formId);\n    // console.log(\"Data Structure:\", JSON.stringify(data, null, 2));\n\n    try {\n      // Track form start if not already tracked\n      if (window._hsq && !window._formStartTracked) {\n        window._hsq.push([\"trackEvent\", { id: \"form_start\" }]);\n        window._formStartTracked = true;\n      }\n\n      const response = await fetch(url, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(data),\n      });\n\n      const responseData = await response.json();\n\n      if (!response.ok) {\n        console.error(\"HubSpot Error Details:\");\n        console.error(\"Status:\", response.status);\n        console.error(\"Response Data:\", responseData);\n        console.error(\n          \"Fields Sent:\",\n          data.fields.map((f) => `${f.name}: ${f.value}`)\n        );\n\n        // Track form submission failure\n        if (window._hsq) {\n          window._hsq.push([\n            \"trackEvent\",\n            {\n              id: \"form_submission_error\",\n              value: response.status,\n            },\n          ]);\n        }\n\n        throw new Error(`HubSpot submission failed: ${responseData.message || \"Unknown error\"}`);\n      }\n\n      // Track successful form submission\n      if (window._hsq) {\n        // Track form submission as conversion\n        window._hsq.push([\n          \"trackFormSubmission\",\n          formId,\n          {\n            formVariant: \"A\",\n            formInstanceId: form.getAttribute(\"data-form-instance-id\") || \"1\",\n          },\n        ]);\n\n        // Track form submission success event\n        window._hsq.push([\"trackEvent\", { id: \"form_submission_success\" }]);\n\n        // Identify the user\n        window._hsq.push([\n          \"identify\",\n          {\n            email: formData.get(\"Email\"),\n            firstname: formData.get(\"First-Name\"),\n            lastname: formData.get(\"Last-Name\"),\n          },\n        ]);\n      }\n\n      // console.log(\"HubSpot submission successful:\", responseData);\n      return responseData;\n    } catch (error) {\n      console.error(\"Error submitting to HubSpot:\", error);\n      throw error;\n    }\n  }\n\n  // Format form data for HubSpot\n  function formatFormData(formData) {\n    const fields = [];\n    const context = {\n      hutk: getHubSpotCookie(),\n      ...getPageInfo(),\n    };\n\n    // Debug logging for ecommerce seller field\n    console.log(\"Raw form data for ecommerce seller:\", formData.get(\"Are-you-an-ecommerce-seller\"));\n\n    // Helper function to clean dollar amounts\n    const cleanDollarAmount = (value) => {\n      if (!value) return value;\n      return value.replace(/[$,]/g, \"\").trim();\n    };\n\n    // Add UTM parameters from form fields to HubSpot submission\n    const utmFields = [\"utm_source\", \"utm_medium\", \"utm_campaign\", \"utm_term\", \"utm_content\"];\n    utmFields.forEach((field) => {\n      const value = formData.get(field);\n      if (value) {\n        fields.push({\n          name: field,\n          value: value.trim(),\n        });\n      }\n    });\n\n    // Map form fields to HubSpot fields - only the essential ones\n    const fieldMapping = {\n      \"First-Name\": \"firstname\",\n      \"Last-Name\": \"lastname\",\n      \"Email\": \"email\",\n      \"Phone\": \"phone\",\n      \"Registered-Business-Name\": \"business_name\",\n      \"Industry\": \"industry__dropdown_\",\n      \"Funding-Amount\": \"user_reported_desired_amount\",\n      \"Revenue-Per-Month\": \"user_reported_monthly_revenue\",\n      \"Use-Of-Funds\": \"use_of_funds\",\n      \"Timeline-For-Loan\": \"when_do_you_need_the_loan_\",\n      \"When-Did-You-Start-Your-Business\": \"year_founded\",\n      \"Are-you-an-ecommerce-seller\": \"ecommerce_seller\",\n      \"Do-you-have-a-business-bank-account\": \"business_bank_account\",\n    };\n\n    // Create fields array for HubSpot\n    for (const [webflowField, hubspotField] of Object.entries(fieldMapping)) {\n      let value = formData.get(webflowField);\n\n      // Debug logging for field mapping\n      if (webflowField === \"Are-you-an-ecommerce-seller\") {\n        console.log(\"Ecommerce seller field mapping:\", {\n          webflowField,\n          hubspotField,\n          value,\n        });\n      }\n\n      // Special handling for Industry field\n      if (webflowField === \"Industry\") {\n        const industrySelect = document.getElementById(\"Industry\");\n        if (industrySelect && industrySelect.value) {\n          value = industrySelect.value;\n        }\n      }\n\n      if (value && value.trim() !== \"\") {\n        // Clean dollar amounts for specific fields\n        if (webflowField === \"Funding-Amount\" || webflowField === \"Revenue-per-month\") {\n          value = cleanDollarAmount(value);\n        }\n\n        // Special handling for industry__dropdown_\n        if (hubspotField === \"industry__dropdown_\") {\n          fields.push({\n            name: \"industry__dropdown_\",\n            value: value.trim(),\n          });\n        } else {\n          fields.push({\n            name: hubspotField,\n            value: value.trim(),\n          });\n        }\n      }\n    }\n\n    // Add business state with correct HubSpot field name\n    const businessState = document.querySelector(\".is-custom-select\");\n    if (businessState && businessState.value && businessState.value !== \"Business state*\") {\n      fields.push({\n        name: \"contact_state\",\n        value: businessState.value.trim(),\n      });\n    }\n\n    // Log final data structure before submission\n    console.log(\"Final HubSpot submission fields:\", {\n      allFields: fields,\n      ecommerceField: fields.find((f) => f.name === \"ecommerce_seller\"),\n    });\n\n    return { fields, context };\n  }\n\n  // Instead of form submit listener, use Formly's submit button\n  const formlySubmitBtn = document.querySelector(\"#submit\");\n  if (formlySubmitBtn) {\n    // Track form step progression\n    const trackFormStep = (stepNumber) => {\n      if (window._hsq) {\n        window._hsq.push([\n          \"trackEvent\",\n          {\n            id: \"form_step_complete\",\n            value: stepNumber,\n          },\n        ]);\n      }\n    };\n\n    // Add step tracking to next buttons\n    document.querySelectorAll('[data-form=\"next-btn\"]').forEach((btn, index) => {\n      btn.addEventListener(\"click\", () => {\n        trackFormStep(index + 1);\n      });\n    });\n\n    formlySubmitBtn.addEventListener(\"click\", async function (e) {\n      try {\n        const formData = new FormData(form);\n\n        // Track form submission attempt\n        if (window._hsq) {\n          window._hsq.push([\"trackEvent\", { id: \"form_submit_attempt\" }]);\n        }\n\n        const result = await submitToHubSpot(formData);\n\n        // Track successful form submission\n        if (window._hsq) {\n          // Track form submission as conversion\n          window._hsq.push([\n            \"trackFormSubmission\",\n            formId,\n            {\n              formVariant: \"A\",\n              formInstanceId: form.getAttribute(\"data-form-instance-id\") || \"1\",\n            },\n          ]);\n\n          // Track form submission success event\n          window._hsq.push([\"trackEvent\", { id: \"form_submission_success\" }]);\n\n          // Identify the user\n          window._hsq.push([\n            \"identify\",\n            {\n              email: formData.get(\"Email\"),\n              firstname: formData.get(\"First-Name\"),\n              lastname: formData.get(\"Last-Name\"),\n            },\n          ]);\n        }\n      } catch (error) {\n        console.error(\"HubSpot submission failed:\", error);\n        const errorMessage = document.querySelector(\".w-form-fail\");\n        if (errorMessage) {\n          errorMessage.style.display = \"block\";\n        }\n\n        // Track form submission failure\n        if (window._hsq) {\n          window._hsq.push([\n            \"trackEvent\",\n            {\n              id: \"form_submission_error\",\n              value: error.message,\n            },\n          ]);\n        }\n      }\n    });\n  } else {\n    console.error(\"Formly submit button not found! Check if the button ID is correct.\");\n  }\n});\n"],
  "mappings": "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",
  "names": ["form", "ecommerceSellerSelect", "fundingAmountInput", "avgMonthlySalesInput", "fundingReasonSelect", "missing", "cleanDollarValue", "inputElement", "value", "number", "getMappedFundingReason", "selectElement", "selectedValue", "mapped", "event", "fundingAmount", "avgMonthlySales", "fundingReason", "params", "redirectUrl", "d", "s", "i", "r", "n", "e", "getUrlParams", "params", "searchParams", "key", "value", "populateUtmFields", "field", "input", "form", "loadHubSpotScript", "script", "formatDollarAmount", "numValue", "formatDate", "month", "dollarInputs", "fundingInput", "revenueInput", "startDateInput", "entries", "entry", "portalId", "formId", "getHubSpotCookie", "_a", "row", "getPageInfo", "getCookie", "name", "parts", "cookieValue", "submitToHubSpot", "formData", "__async", "url", "data", "formatFormData", "response", "responseData", "f", "error", "fields", "context", "__spreadValues", "cleanDollarAmount", "fieldMapping", "webflowField", "hubspotField", "industrySelect", "businessState", "formlySubmitBtn", "trackFormStep", "stepNumber", "btn", "index", "result", "errorMessage"]
}
