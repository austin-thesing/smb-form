{
  "version": 3,
  "sources": ["../ms-form-route.js"],
  "sourcesContent": ["// HubSpot tracking initialization\n(function (d, s, i, r) {\n  if (d.getElementById(i)) {\n    return;\n  }\n  var n = d.createElement(s),\n    e = d.getElementsByTagName(s)[0];\n  n.id = i;\n  n.src = \"//js.hs-analytics.net/analytics/\" + Math.ceil(new Date() / r) * r + \"/19654160.js\";\n\n  // Add onload handler to ensure tracking happens after script loads\n  n.onload = function () {\n    if (window._hsq) {\n      window._hsq.push([\"setPath\", window.location.pathname]);\n      window._hsq.push([\"trackPageView\"]);\n    }\n  };\n\n  e.parentNode.insertBefore(n, e);\n})(document, \"script\", \"hs-analytics\", 300000);\n\n// Additional page view tracking on window load\nwindow.addEventListener(\"load\", function () {\n  if (window._hsq) {\n    window._hsq.push([\"setPath\", window.location.pathname]);\n    window._hsq.push([\"trackPageView\"]);\n  }\n});\n\n// Load HubSpot Forms Script\nfunction loadHubSpotScript() {\n  const script = document.createElement(\"script\");\n  script.src = \"https://js.hsforms.net/forms/embed/19654160.js\";\n  script.defer = true;\n  document.head.appendChild(script);\n}\n\n// Function to format input as dollar amount\nfunction formatDollarAmount(input) {\n  // Remove any non-digit characters\n  let value = input.value.replace(/\\D/g, \"\");\n\n  // If empty or only non-numeric characters, clear the input\n  if (value === \"\") {\n    input.value = \"\";\n    return;\n  }\n\n  // Convert to number and ensure it's valid\n  let numValue = parseInt(value);\n  if (isNaN(numValue)) {\n    input.value = \"\";\n    return;\n  }\n\n  // Format the number with commas and no cents\n  value = numValue.toLocaleString(\"en-US\", {\n    style: \"currency\",\n    currency: \"USD\",\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0,\n  });\n\n  // Remove the currency symbol (we'll add it manually to preserve cursor position)\n  value = value.replace(/^\\$/, \"\");\n\n  // Update the input value\n  input.value = \"$\" + value;\n}\n\n// Function to format date as MM/YY with validation\nfunction formatDate(input) {\n  // Remove any non-digit characters\n  let value = input.value.replace(/\\D/g, \"\");\n\n  // Handle month validation\n  if (value.length >= 2) {\n    let month = parseInt(value.slice(0, 2));\n    if (month === 0) month = 1;\n    if (month > 12) month = 12;\n    value = month.toString().padStart(2, \"0\") + value.slice(2);\n  }\n\n  // Add slash after first two digits\n  if (value.length > 2) {\n    value = value.slice(0, 2) + \"/\" + value.slice(2);\n  }\n\n  // Limit to MM/YY format (5 characters)\n  if (value.length > 5) {\n    value = value.slice(0, 5);\n  }\n\n  input.value = value;\n}\n\n// Find all inputs with data-type=\"dollar\"\nconst dollarInputs = document.querySelectorAll('input[data-type=\"dollar\"]');\ndollarInputs.forEach((input) => {\n  input.addEventListener(\"input\", function () {\n    if (this.value.trim() !== \"\") {\n      formatDollarAmount(this);\n    }\n  });\n});\n\n// Handle Funding-Amount input\nconst fundingInput = document.getElementById(\"Funding-Amount\");\nif (fundingInput) {\n  fundingInput.addEventListener(\"input\", function () {\n    if (this.value.trim() !== \"\") {\n      formatDollarAmount(this);\n    }\n  });\n}\n\n// Handle Revenue-per-month input\nconst revenueInput = document.getElementById(\"Revenue-per-month\");\nif (revenueInput) {\n  revenueInput.addEventListener(\"input\", function () {\n    if (this.value.trim() !== \"\") {\n      formatDollarAmount(this);\n    }\n  });\n}\n\n// Add date formatting to business start date input\nconst startDateInput = document.getElementById(\"When-did-you-start-your-business\");\nif (startDateInput) {\n  startDateInput.addEventListener(\"input\", function () {\n    formatDate(this);\n  });\n}\n\n// HubSpot form submission handler\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  // console.log(\"DOM Content Loaded\");\n\n  // Load HubSpot Forms script\n  loadHubSpotScript();\n\n  const form = document.getElementById(\"wf-form-SMB\");\n  // console.log(\"Found form element:\", form);\n\n  if (!form) {\n    console.error(\"Form element not found! Check if the form ID is correct.\");\n    return;\n  }\n\n  // HubSpot form configuration\n  const portalId = \"19654160\"; // Your HubSpot portal ID\n  const formId = \"e387a024-a165-4d47-956c-23e0e1f6b7eb\"; // Your HubSpot form GUID\n\n  // Get HubSpot tracking cookie\n  function getHubSpotCookie() {\n    return (\n      document.cookie\n        .split(\"; \")\n        .find((row) => row.startsWith(\"hubspotutk=\"))\n        ?.split(\"=\")[1] || \"\"\n    );\n  }\n\n  // Get page info for HubSpot context\n  function getPageInfo() {\n    return {\n      pageUri: window.location.href,\n      pageName: document.title,\n    };\n  }\n\n  // Submit to HubSpot\n  async function submitToHubSpot(formData) {\n    const url = `https://api.hsforms.com/submissions/v3/integration/submit/${portalId}/${formId}`;\n    const data = formatFormData(formData);\n\n    // console.log(\"HubSpot Submission Details:\");\n    // console.log(\"URL:\", url);\n    // console.log(\"Portal ID:\", portalId);\n    // console.log(\"Form ID:\", formId);\n    // console.log(\"Data Structure:\", JSON.stringify(data, null, 2));\n\n    try {\n      // Track form start if not already tracked\n      if (window._hsq && !window._formStartTracked) {\n        window._hsq.push([\"trackEvent\", { id: \"form_start\" }]);\n        window._formStartTracked = true;\n      }\n\n      const response = await fetch(url, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(data),\n      });\n\n      const responseData = await response.json();\n\n      if (!response.ok) {\n        console.error(\"HubSpot Error Details:\");\n        console.error(\"Status:\", response.status);\n        console.error(\"Response Data:\", responseData);\n        console.error(\n          \"Fields Sent:\",\n          data.fields.map((f) => `${f.name}: ${f.value}`)\n        );\n\n        // Track form submission failure\n        if (window._hsq) {\n          window._hsq.push([\n            \"trackEvent\",\n            {\n              id: \"form_submission_error\",\n              value: response.status,\n            },\n          ]);\n        }\n\n        throw new Error(`HubSpot submission failed: ${responseData.message || \"Unknown error\"}`);\n      }\n\n      // Track successful form submission\n      if (window._hsq) {\n        // Track form submission as conversion\n        window._hsq.push([\n          \"trackConversion\",\n          {\n            id: formId,\n          },\n        ]);\n\n        // Track form submission success event\n        window._hsq.push([\"trackEvent\", { id: \"form_submission_success\" }]);\n\n        // Identify the user\n        window._hsq.push([\n          \"identify\",\n          {\n            email: formData.get(\"Email\"),\n            firstname: formData.get(\"First-Name\"),\n            lastname: formData.get(\"Last-Name\"),\n          },\n        ]);\n      }\n\n      // console.log(\"HubSpot submission successful:\", responseData);\n      return responseData;\n    } catch (error) {\n      console.error(\"Error submitting to HubSpot:\", error);\n      throw error;\n    }\n  }\n\n  // Format form data for HubSpot\n  function formatFormData(formData) {\n    const fields = [];\n    const context = {\n      hutk: getHubSpotCookie(),\n      ...getPageInfo(),\n    };\n\n    // Helper function to clean dollar amounts\n    const cleanDollarAmount = (value) => {\n      if (!value) return value;\n      return value.replace(/[$,]/g, \"\").trim();\n    };\n\n    // Map form fields to HubSpot fields - only the essential ones\n    const fieldMapping = {\n      \"First-Name\": \"firstname\",\n      \"Last-Name\": \"lastname\",\n      \"Email\": \"email\",\n      \"Phone\": \"phone\",\n      \"Registered-Business-Name\": \"business_name\",\n      \"Industry\": \"industry__dropdown_\",\n      \"Funding-Amount\": \"user_reported_desired_amount\",\n      \"Revenue-per-month\": \"user_reported_monthly_revenue\",\n      \"Use-of-funds\": \"use_of_funds\",\n      \"Timeline-For-Loan\": \"when_do_you_need_the_loan_\",\n      \"When-did-you-start-your-business\": \"year_founded\",\n      \"Are-you-an-ecommerce-seller\": \"ecommerce_seller\",\n    };\n\n    // Create fields array for HubSpot\n    for (const [webflowField, hubspotField] of Object.entries(fieldMapping)) {\n      let value = formData.get(webflowField);\n\n      // Special handling for Industry field\n      if (webflowField === \"Industry\") {\n        const industrySelect = document.getElementById(\"Industry\");\n        if (industrySelect && industrySelect.value) {\n          value = industrySelect.value;\n        }\n      }\n\n      if (value && value.trim() !== \"\") {\n        // Clean dollar amounts for specific fields\n        if (webflowField === \"Funding-Amount\" || webflowField === \"Revenue-per-month\") {\n          value = cleanDollarAmount(value);\n        }\n\n        // Special handling for industry__dropdown_\n        if (hubspotField === \"industry__dropdown_\") {\n          fields.push({\n            name: \"industry__dropdown_\",\n            value: value.trim(),\n          });\n        } else {\n          fields.push({\n            name: hubspotField,\n            value: value.trim(),\n          });\n        }\n      }\n    }\n\n    // Add business state with correct HubSpot field name\n    const businessState = document.querySelector(\".is-custom-select\");\n    if (businessState && businessState.value && businessState.value !== \"Business state*\") {\n      fields.push({\n        name: \"contact_state\",\n        value: businessState.value.trim(),\n      });\n    }\n\n    // Log final data for debugging\n    // console.log(\n    //   \"Fields being sent to HubSpot:\",\n    //   fields.map((f) => `${f.name}: ${f.value}`)\n    // );\n\n    return { fields, context };\n  }\n\n  // Instead of form submit listener, use Formly's submit button\n  const formlySubmitBtn = document.querySelector(\"#submit\");\n  if (formlySubmitBtn) {\n    // console.log(\"Found Formly submit button, adding click listener\");\n\n    // Track form step progression\n    const trackFormStep = (stepNumber) => {\n      if (window._hsq) {\n        window._hsq.push([\n          \"trackEvent\",\n          {\n            id: \"form_step_complete\",\n            value: stepNumber,\n          },\n        ]);\n      }\n    };\n\n    // Add step tracking to next buttons\n    document.querySelectorAll('[data-form=\"next-btn\"]').forEach((btn, index) => {\n      btn.addEventListener(\"click\", () => {\n        trackFormStep(index + 1);\n      });\n    });\n\n    formlySubmitBtn.addEventListener(\"click\", async function (e) {\n      // console.log(\"Formly submit button clicked - preparing HubSpot submission\");\n\n      const successMessage = document.querySelector(\".w-form-done\");\n      const errorMessage = document.querySelector(\".w-form-fail\");\n\n      try {\n        // console.log(\"Starting HubSpot submission process\");\n        const formData = new FormData(form);\n        // console.log(\"Form data collected:\", Object.fromEntries(formData));\n\n        const result = await submitToHubSpot(formData);\n        // console.log(\"HubSpot submission completed successfully\");\n        // Let Formly handle the success UI\n      } catch (error) {\n        console.error(\"HubSpot submission failed:\", error);\n        errorMessage.style.display = \"block\";\n        successMessage.style.display = \"none\";\n      }\n    });\n  } else {\n    console.error(\"Formly submit button not found! Check if the button ID is correct.\");\n  }\n});\n"],
  "mappings": "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",
  "names": []
}
