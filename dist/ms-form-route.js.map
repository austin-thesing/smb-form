{
  "version": 3,
  "sources": ["../ms-form-route.js"],
  "sourcesContent": ["// HubSpot tracking initialization\n(function (d, s, i, r) {\n  if (d.getElementById(i)) {\n    return;\n  }\n  var n = d.createElement(s),\n    e = d.getElementsByTagName(s)[0];\n  n.id = i;\n  n.src = \"//js.hs-analytics.net/analytics/\" + Math.ceil(new Date() / r) * r + \"/19654160.js\";\n\n  // Add onload handler to ensure tracking happens after script loads\n  n.onload = function () {\n    if (window._hsq) {\n      window._hsq.push([\"setPath\", window.location.pathname]);\n      window._hsq.push([\"trackPageView\"]);\n    }\n  };\n\n  e.parentNode.insertBefore(n, e);\n})(document, \"script\", \"hs-analytics\", 300000);\n\n// Additional page view tracking on window load\nwindow.addEventListener(\"load\", function () {\n  if (window._hsq) {\n    window._hsq.push([\"setPath\", window.location.pathname]);\n    window._hsq.push([\"trackPageView\"]);\n  }\n});\n\n// Load HubSpot Forms Script\nfunction loadHubSpotScript() {\n  const script = document.createElement(\"script\");\n  script.src = \"https://js.hsforms.net/forms/embed/19654160.js\";\n  script.defer = true;\n  document.head.appendChild(script);\n}\n\n// Function to format input as dollar amount\nfunction formatDollarAmount(input) {\n  // Remove any non-digit characters\n  let value = input.value.replace(/\\D/g, \"\");\n\n  // If empty or only non-numeric characters, clear the input\n  if (value === \"\") {\n    input.value = \"\";\n    return;\n  }\n\n  // Convert to number and ensure it's valid\n  let numValue = parseInt(value);\n  if (isNaN(numValue)) {\n    input.value = \"\";\n    return;\n  }\n\n  // Format the number with commas and no cents\n  value = numValue.toLocaleString(\"en-US\", {\n    style: \"currency\",\n    currency: \"USD\",\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0,\n  });\n\n  // Remove the currency symbol (we'll add it manually to preserve cursor position)\n  value = value.replace(/^\\$/, \"\");\n\n  // Update the input value\n  input.value = \"$\" + value;\n}\n\n// Function to format date as MM/YY with validation\nfunction formatDate(input) {\n  // Remove any non-digit characters\n  let value = input.value.replace(/\\D/g, \"\");\n\n  // Handle month validation\n  if (value.length >= 2) {\n    let month = parseInt(value.slice(0, 2));\n    if (month === 0) month = 1;\n    if (month > 12) month = 12;\n    value = month.toString().padStart(2, \"0\") + value.slice(2);\n  }\n\n  // Add slash after first two digits\n  if (value.length > 2) {\n    value = value.slice(0, 2) + \"/\" + value.slice(2);\n  }\n\n  // Limit to MM/YY format (5 characters)\n  if (value.length > 5) {\n    value = value.slice(0, 5);\n  }\n\n  input.value = value;\n}\n\n// Find all inputs with data-type=\"dollar\"\nconst dollarInputs = document.querySelectorAll('input[data-type=\"dollar\"]');\ndollarInputs.forEach((input) => {\n  input.addEventListener(\"input\", function () {\n    if (this.value.trim() !== \"\") {\n      formatDollarAmount(this);\n    }\n  });\n});\n\n// Handle Funding-Amount input\nconst fundingInput = document.getElementById(\"Funding-Amount\");\nif (fundingInput) {\n  fundingInput.addEventListener(\"input\", function () {\n    if (this.value.trim() !== \"\") {\n      formatDollarAmount(this);\n    }\n  });\n}\n\n// Handle Revenue-per-month input\nconst revenueInput = document.getElementById(\"Revenue-per-month\");\nif (revenueInput) {\n  revenueInput.addEventListener(\"input\", function () {\n    if (this.value.trim() !== \"\") {\n      formatDollarAmount(this);\n    }\n  });\n}\n\n// Add date formatting to business start date input\nconst startDateInput = document.getElementById(\"When-did-you-start-your-business\");\nif (startDateInput) {\n  startDateInput.addEventListener(\"input\", function () {\n    formatDate(this);\n  });\n}\n\n// HubSpot form submission handler\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  // console.log(\"DOM Content Loaded\");\n\n  // Load HubSpot Forms script\n  loadHubSpotScript();\n\n  const form = document.getElementById(\"wf-form-SMB\");\n  // console.log(\"Found form element:\", form);\n\n  if (!form) {\n    console.error(\"Form element not found! Check if the form ID is correct.\");\n    return;\n  }\n\n  // HubSpot form configuration\n  const portalId = \"19654160\"; // Your HubSpot portal ID\n  const formId = \"e387a024-a165-4d47-956c-23e0e1f6b7eb\"; // Your HubSpot form GUID\n\n  // Get HubSpot tracking cookie\n  function getHubSpotCookie() {\n    return (\n      document.cookie\n        .split(\"; \")\n        .find((row) => row.startsWith(\"hubspotutk=\"))\n        ?.split(\"=\")[1] || \"\"\n    );\n  }\n\n  // Get page info for HubSpot context\n  function getPageInfo() {\n    return {\n      pageUri: window.location.href,\n      pageName: document.title,\n    };\n  }\n\n  // Submit to HubSpot\n  async function submitToHubSpot(formData) {\n    const url = `https://api.hsforms.com/submissions/v3/integration/submit/${portalId}/${formId}`;\n    const data = formatFormData(formData);\n\n    // console.log(\"HubSpot Submission Details:\");\n    // console.log(\"URL:\", url);\n    // console.log(\"Portal ID:\", portalId);\n    // console.log(\"Form ID:\", formId);\n    // console.log(\"Data Structure:\", JSON.stringify(data, null, 2));\n\n    try {\n      // Track form start if not already tracked\n      if (window._hsq && !window._formStartTracked) {\n        window._hsq.push([\"trackEvent\", { id: \"form_start\" }]);\n        window._formStartTracked = true;\n      }\n\n      const response = await fetch(url, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(data),\n      });\n\n      const responseData = await response.json();\n\n      if (!response.ok) {\n        console.error(\"HubSpot Error Details:\");\n        console.error(\"Status:\", response.status);\n        console.error(\"Response Data:\", responseData);\n        console.error(\n          \"Fields Sent:\",\n          data.fields.map((f) => `${f.name}: ${f.value}`)\n        );\n\n        // Track form submission failure\n        if (window._hsq) {\n          window._hsq.push([\n            \"trackEvent\",\n            {\n              id: \"form_submission_error\",\n              value: response.status,\n            },\n          ]);\n        }\n\n        throw new Error(`HubSpot submission failed: ${responseData.message || \"Unknown error\"}`);\n      }\n\n      // Track successful form submission\n      if (window._hsq) {\n        // Track form submission as conversion\n        window._hsq.push([\n          \"trackConversion\",\n          {\n            id: formId,\n          },\n        ]);\n\n        // Track form submission success event\n        window._hsq.push([\"trackEvent\", { id: \"form_submission_success\" }]);\n\n        // Identify the user\n        window._hsq.push([\n          \"identify\",\n          {\n            email: formData.get(\"Email\"),\n            firstname: formData.get(\"First-Name\"),\n            lastname: formData.get(\"Last-Name\"),\n          },\n        ]);\n      }\n\n      // console.log(\"HubSpot submission successful:\", responseData);\n      return responseData;\n    } catch (error) {\n      console.error(\"Error submitting to HubSpot:\", error);\n      throw error;\n    }\n  }\n\n  // Format form data for HubSpot\n  function formatFormData(formData) {\n    const fields = [];\n    const context = {\n      hutk: getHubSpotCookie(),\n      ...getPageInfo(),\n    };\n\n    // Helper function to clean dollar amounts\n    const cleanDollarAmount = (value) => {\n      if (!value) return value;\n      return value.replace(/[$,]/g, \"\").trim();\n    };\n\n    // Get UTM parameters from existing cookie\n    const utmParams = getCookie(\"PPC Attribution Tracker\") || {};\n\n    // Add UTM parameters to fields array\n    if (utmParams) {\n      if (utmParams.utm_campaign) {\n        fields.push({\n          name: \"utm_campaign\",\n          value: utmParams.utm_campaign,\n        });\n      }\n      if (utmParams.utm_source) {\n        fields.push({\n          name: \"utm_source\",\n          value: utmParams.utm_source,\n        });\n      }\n      if (utmParams.utm_medium) {\n        fields.push({\n          name: \"utm_medium\",\n          value: utmParams.utm_medium,\n        });\n      }\n      if (utmParams.utm_term) {\n        fields.push({\n          name: \"utm_term\",\n          value: utmParams.utm_term,\n        });\n      }\n      if (utmParams.utm_content) {\n        fields.push({\n          name: \"utm_content\",\n          value: utmParams.utm_content,\n        });\n      }\n    }\n\n    // Map form fields to HubSpot fields - only the essential ones\n    const fieldMapping = {\n      \"First-Name\": \"firstname\",\n      \"Last-Name\": \"lastname\",\n      \"Email\": \"email\",\n      \"Phone\": \"phone\",\n      \"Registered-Business-Name\": \"business_name\",\n      \"Industry\": \"industry__dropdown_\",\n      \"Funding-Amount\": \"user_reported_desired_amount\",\n      \"Revenue-per-month\": \"user_reported_monthly_revenue\",\n      \"Use-of-funds\": \"use_of_funds\",\n      \"Timeline-For-Loan\": \"when_do_you_need_the_loan_\",\n      \"When-did-you-start-your-business\": \"year_founded\",\n      \"Are-you-an-ecommerce-seller\": \"ecommerce_seller\",\n    };\n\n    // Create fields array for HubSpot\n    for (const [webflowField, hubspotField] of Object.entries(fieldMapping)) {\n      let value = formData.get(webflowField);\n\n      // Special handling for Industry field\n      if (webflowField === \"Industry\") {\n        const industrySelect = document.getElementById(\"Industry\");\n        if (industrySelect && industrySelect.value) {\n          value = industrySelect.value;\n        }\n      }\n\n      if (value && value.trim() !== \"\") {\n        // Clean dollar amounts for specific fields\n        if (webflowField === \"Funding-Amount\" || webflowField === \"Revenue-per-month\") {\n          value = cleanDollarAmount(value);\n        }\n\n        // Special handling for industry__dropdown_\n        if (hubspotField === \"industry__dropdown_\") {\n          fields.push({\n            name: \"industry__dropdown_\",\n            value: value.trim(),\n          });\n        } else {\n          fields.push({\n            name: hubspotField,\n            value: value.trim(),\n          });\n        }\n      }\n    }\n\n    // Add business state with correct HubSpot field name\n    const businessState = document.querySelector(\".is-custom-select\");\n    if (businessState && businessState.value && businessState.value !== \"Business state*\") {\n      fields.push({\n        name: \"contact_state\",\n        value: businessState.value.trim(),\n      });\n    }\n\n    // Log final data for debugging\n    // console.log(\n    //   \"Fields being sent to HubSpot:\",\n    //   fields.map((f) => `${f.name}: ${f.value}`)\n    // );\n\n    return { fields, context };\n  }\n\n  // Instead of form submit listener, use Formly's submit button\n  const formlySubmitBtn = document.querySelector(\"#submit\");\n  if (formlySubmitBtn) {\n    // console.log(\"Found Formly submit button, adding click listener\");\n\n    // Track form step progression\n    const trackFormStep = (stepNumber) => {\n      if (window._hsq) {\n        window._hsq.push([\n          \"trackEvent\",\n          {\n            id: \"form_step_complete\",\n            value: stepNumber,\n          },\n        ]);\n      }\n    };\n\n    // Add step tracking to next buttons\n    document.querySelectorAll('[data-form=\"next-btn\"]').forEach((btn, index) => {\n      btn.addEventListener(\"click\", () => {\n        trackFormStep(index + 1);\n      });\n    });\n\n    formlySubmitBtn.addEventListener(\"click\", async function (e) {\n      // console.log(\"Formly submit button clicked - preparing HubSpot submission\");\n\n      const successMessage = document.querySelector(\".w-form-done\");\n      const errorMessage = document.querySelector(\".w-form-fail\");\n\n      try {\n        // console.log(\"Starting HubSpot submission process\");\n        const formData = new FormData(form);\n        // console.log(\"Form data collected:\", Object.fromEntries(formData));\n\n        const result = await submitToHubSpot(formData);\n        // console.log(\"HubSpot submission completed successfully\");\n        // Let Formly handle the success UI\n      } catch (error) {\n        console.error(\"HubSpot submission failed:\", error);\n        errorMessage.style.display = \"block\";\n        successMessage.style.display = \"none\";\n      }\n    });\n  } else {\n    console.error(\"Formly submit button not found! Check if the button ID is correct.\");\n  }\n});\n"],
  "mappings": "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",
  "names": ["d", "s", "i", "r", "n", "e", "loadHubSpotScript", "script", "formatDollarAmount", "input", "value", "numValue", "formatDate", "month", "dollarInputs", "fundingInput", "revenueInput", "startDateInput", "form", "portalId", "formId", "getHubSpotCookie", "_a", "row", "getPageInfo", "submitToHubSpot", "formData", "__async", "url", "data", "formatFormData", "response", "responseData", "f", "error", "fields", "context", "__spreadValues", "cleanDollarAmount", "utmParams", "fieldMapping", "webflowField", "hubspotField", "industrySelect", "businessState", "formlySubmitBtn", "trackFormStep", "stepNumber", "btn", "index", "successMessage", "errorMessage", "result"]
}
